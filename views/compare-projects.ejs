<%- include('partials/'+versionPages.header) %>
<style>
.p90cont{
  width:95%;
  margin:auto;
}
.audience-type {
  width:60px;
  height:40px;
  background:#3a586d;
  border:0px;
  color:#fff;
  padding-top:7px;
  border-radius:5px;
  font-size:1rem;
  display:inline-block;
}
#refreshOverlay{
  position: absolute;
  width: 100%;
  height: 100%;
  font-size: 150px;
  background-color: #0f0f0f66;
  mix-blend-mode: initial;
  color: white;
  left: -2000px;
  cursor:pointer;
}
#refreshOverlay:hover{
  background:unset;
  color:black;
}
#refreshOverlay.spin{
  animation: spin 1s infinite;
  background:unset;
  color:black;
}
@keyframes spin {
  0%   { transform: rotate(0deg);; }
  100% { transform: rotate(720deg);; }
}
.list-group-item {
  background:#3a586d;
  border:0px;
  border-radius:5px;
  color:#fff;
  display:inline-block;
  padding:6px;
}
canvas {
  margin: 20px 0px;
}
.jobRow{
  text-align: left;
}
.jobRow .list-group-item {
    height: 30px;
    width: 50px;
    line-height: 1em;
    padding: 7px;
    background: #495f6fed;
}
.h5, h5 {
    font-size: 1.25rem;
    display: inline;
    padding-top:10px
}
.kpi {
  display: inline;
  font-size: 7em;
  opacity: 0.5;
  padding: 20px;
  width: 170px;
  color:red;
}
.kpiDropdown{
  position: relative;
  margin:10px auto;
  height: 0px;
  padding-top: 0px;
  transition: height 1s ease-out;
  overflow: scroll;
  box-shadow: inset 0px 0px 12px 7px #00000030;
}
.kpiDropdown table,.kpiDropdown canvas,.kpiDropdown div{
  mix-blend-mode:darken;
}
#agentKPI{
  color:gray;
}
.kpi .info {
  font-size: 26px;
}
#qualityTable{
  width: 80%;
  margin: 30px auto;
}
#performanceTable, #dailyTable, #agentTable, #spendTable, #costsTable{
  margin: 10px auto;
  width: 95%
}
#performanceTable tr{
  cursor:pointer;
}
.tableInners{
  display:none;
}
#modal-body .dayTables{
  width:100%;
}
.modal-dialog{
  max-width:950px;
}
.modal-content{
  height: 80vh;
}
.dayTables, .agentTables {
  width: 98%;
}
.tabulator-col,.tabulator-cell{
  text-align:center;
}
#costsTable .tabulator-header{
  display:none;
}
.remBtn, .addBtn{
  padding: 3px;
  height: 100%;
  border: none;
  width: 100%;
}
.noRightBorder{
  border-right:none!important;
}
.addRemCol{
  padding:0px!important
}
#costsTable .tabulator .tabulator-header .tabulator-col .tabulator-col-content {
  padding: 2px;
  font-size: small;
}
input::-webkit-outer-spin-button,
input::-webkit-inner-spin-button {
  -webkit-appearance: none;
  margin: 0;
}
#budgetPiesCont{
  display:flex;
}
#jobsTable td {
  padding: 5px;
  line-height: 2em;
}
#jobsTable tr:not(.hiddenTr) {
  border-bottom: 1px solid #c9c9c9;
  border-top: 1px solid #c9c9c9;
}
.viewJob {
  transform: scale(1.5);
}
label {
  margin-bottom: 0em;
}
.hiddenTr{
  background-color:white;
}
</style>

<%

const dateIf = (inDate, seperator, order) => {
  let day =''
  if (new Date(inDate).getDate() < 10) {
    day = '0' + new Date(inDate).getDate()
  } else {
    day = new Date(inDate).getDate()
  }
  let month =''
  if (new Date(inDate).getMonth()+1 < 10) {
    month = '0' + (new Date(inDate).getMonth()+1)
  } else {
    month = (new Date(inDate).getMonth()+1)
  }
  let year = new Date(inDate).getFullYear()
  if(order=="f"){
  return(day+seperator+month+seperator+year)
  }
  if(order=="r"){
  return(year+seperator+month+seperator+day)
  }
}
%>

<div class="container" style="padding-top:70px;">
      <div class="card viewerHeight text-dark bg-light mb-2 text-center">
        <div class="card-body">
          <div id="topHalf" class="card">
            <form class="" id="updateForm" action="/compare-projects/" method="post" style="margin-bottom: 10px;">
              Comparing:<span class="infoHover">Change which projects you want to compare performance on.</span>
              <select class="selectpicker" id="compareTo" multiple name="compareTo" data-live-search="true">
                <option value="" disabled></option>
                <%allProjects.forEach((project, i) => {%>
                <option value="<%=project.quoteID%>" <%if(projects.map(el=>el.quoteID).includes(project.quoteID)){%>selected<%}%>><%=project.quoteNo%> <%=project.quoteName%></option>
                <%});%>
              </select>
              <input type="text" style="display:none;" name="jobIDs" id="jobIDs" value="<%- allJobs.map(el=>el.jobID) %>"/>
              <input type="text" name="quoteIDs" id="quoteIDs" style="display:none" value="<%-projects.map(el=>el.quoteID)%>">
              <button class="btn btn-primary" name="update" id="update">Update view</button>
            </form>

            <p>
              <table id="jobsTable">
                <%  projects.forEach((project , index) => { %>
                <%  if(allJobs.filter(el=>el.projectID==project.projectID).length>0){ %>
                <tr class="hiddenTr">
                <td><input type="checkbox" class="viewJob hidden" name="viewJob-all" id="viewJob-all" <%=jobs.filter(el=>el.projectID==project.projectID).length==allJobs.filter(el=>el.projectID==project.projectID).length?'checked':''%>></td>
                <td colspan="7"><h5><%= project.quoteNo %> <%= project.quoteName %></h5></td>
                </tr>
                <%  allJobs.filter(el=>el.projectID==project.projectID).forEach((job , index) => {%>
                <tr>
                  <td><input type="checkbox" class="viewJob" name="viewJob-<%=job.jobID%>" id="viewJob-<%=job.jobID%>" <%=jobs.map(el=>el.jobID).includes(job.jobID)?'checked':''%>></td>
                  <td><label for="viewJob-<%=job.jobID%>"><%=job.jobName%></label></td>
                  <td width="150px">
                    <% if (job.isJobHourly == 1) {%><i class="far fa-clock list-group-item"></i><%}%>
                    <% if (job.isJobDay == 1) {%><div class="far fa-sun list-group-item" style="color:#ede165;" title="Day"></div><%}%>
                    <% if (job.isJobEve == 1) {%><div class="far fa-moon list-group-item" style="color:#aea7c9;" title="Evening"></div><%}%>
                    <% if (job.isJobCATI == 1) {%><i class="fas fa-phone list-group-item" title="CATI"></i><%}%>
                    <% if (job.isJobOnline == 1) {%><i class="fas fa-wifi list-group-item" title="Online"></i><%}%>
                    <% if (job.isJobFace == 1) {%><i class="fas fa-home list-group-item" title="Face to Face"></i><%}%>
                    <% if (job.isJobRecruitment == 1) {%><i class="fas fa-clipboard-list list-group-item" title="Recruitment"></i><%}%>
                    <% if (job.isJobInternational == 1) {%><i class="fas fa-globe-europe list-group-item" title="International"></i><%}%>
                    <% if (job.isJobValidation == 1) {%><i class="fas fa-check-double list-group-item" title="Validation"></i><%}%>
                    <% if (job.isJobRecontacts == 1) {%><i class="fas fa-phone-square list-group-item" title="Recontact"></i><%}%>
                    <% if (job.isJobDP == 1) {%><i class="fas fa-keyboard list-group-item" title="DP"></i><%}%>
                  </td>
                  <td><%=job.ints%>/<%=job.interviewsTarget%></td>
                  <td><%=dateIf(job.startDate,"/","f")%> - <%=dateIf(job.endDate,"/","f")%></td>
                  <td width="100px">
                    <a href="/edit-group-page/<%= job.jobID %>" rel="noopener" class="btn btn-sm btn-success" style="width:100%;">Edit</a>
                  </td>
                  <td width="100px">
                    <a href="#" onclick="checkDupe(<%= job.jobID %>)" rel="noopener" class="btn btn-sm btn-primary" style="width:100%;">Duplicate</a>
                  </td>
                  <td width="100px">
                    <a href="#" onclick="checkDelete(<%= job.jobID %>)" rel="noopener" class="btn btn-sm btn-danger" style="width:100%;">Delete</a>
                  </td>
                  </tr>
                <%})%>
                <%}%>
                <%})%>
              </table>
            </p>
            <div id="kpiContainer">
              <button class="kpi btn btn-white" href="#kpiContainer" data-href="contDropdown" id="contKPI">
                <i class="fas fa-pound-sign"></i>
                <div class="info"></div>
              </button>
              <button class="kpi btn btn-white" data-href="scheduleDropdown" id="scheduleKPI">
                <i class="far fa-calendar-alt"></i>
                <div class="info">n/a</div>
              </button>
              <button class="kpi btn btn-white" data-href="qualityDropdown" id="qualityKPI">
                <i class="fas far fa-check-square"></i>
                <div class="info"></div>
              </button>
              <button class="kpi btn btn-white" data-href="agentDropdown" id="agentKPI">
                <i class="fas fa-user-alt"></i>
                <div class="info"><%=Math.round((agentStats.reduce((a,b)=>a+b.ints,0)/agentStats.reduce((a,b)=>a+b.hrs,0)*100))/100%>ph</div>
              </button>
            </div>
          </div>
          <div class="kpiDropdown" id="contDropdown">
            <br>
            <h5>Contribution</h5>
            <canvas id="contChart" height="100"></canvas>
          </div>
          <div class="kpiDropdown" id="scheduleDropdown">
            <br>
            <h5>Schedule<span class="infoHover">The target completes here is based on the interview targets of all visible target groups added together. In order to make sure this is accurate, please ensure all completes required for the project are accounted for in the project's target groups.</span></h5>
            <canvas id="completesChart" height="100"></canvas>
          </div>
          <div class="kpiDropdown" id="qualityDropdown">
            <br>
            <h5>Quality</h5>
            <div id="qualityTable" width="70%"></div>
          </div>
          <div class="kpiDropdown" id="agentDropdown">
          <br>
          <h5>Interviewer performance</h5>
          <div class="p90cont">
            <table id="performanceTable" class="table-striped table-hover">
              <thead>
                <tr>
                  <th width="35%"></th>
                  <%projects.forEach((project, i) => {%>
                  <th colspan="2"><%=project.quoteName %></th>
                  <%});%>
                </tr>
                <tr>
                  <th width="35%">Agent</th>
                  <%projects.forEach((project, i) => {%>
                  <th>AHR</th>
                  <th>Completes</th>
                  <%});%>
                </tr>
              </thead><tbody>
              <%allAgents.forEach((agent, i) => {%>
              <tr>
                <td width="35%"><%=agent.agentName%></td>
                <%
                projects.forEach((project, i2) => {
                var projAgent=agentStats.find(el=>el.projectID==project.projectID && el.agentID==agent.agentID)
                %>
                <td><%=projAgent?(projAgent.ints/projAgent.hrs).toFixed(2):''%></td>
                <td><%=projAgent?projAgent.ints:''%></td>
                <%});%>
              </tr>
              <%});%>
            </tbody>
          </table>
        </div>
        <div style="" id="agentTableInners">
          <%allAgents.forEach((agent, i) => { %>
            <div class="tableInners" id="agent<%=i%>">
              <table id="agent<%=i%>table" class="table-dark agentTables">
                <thead>
                  <tr>
                    <th width="35%">Project</th>
                    <th width="15%">Date</th>
                    <th width="10%">AHR</th>
                    <th width="10%">Dials</th>
                    <th width="10%">Hours</th>
                    <th width="10%">Completes</th>
                    <th width="10%">Contribution</th>
                  </tr>
                </thead>
                <tbody>
                <%
                var filtered=shifts.filter(el=>el.agentID==agent.agentID)
                filtered.forEach((shift, i2) => { %>
                  <tr>
                    <td width="35%"><%=projects.find(el=>el.projectID==shift.projectID).quoteName%></td>
                    <td width="15%" data-sort="<%=dateIf(shift.inputDate,"-","r")%>"><%=dateIf(shift.inputDate,"/","f")%></td>
                    <td width="10%"><%=(shift.ints/shift.hrs).toFixed(2)%></td>
                    <td width="10%"><%=shift.dials?Math.round(shift.dials):''%></td>
                    <td width="10%"><%=shift.hrs%></td>
                    <td width="10%"><%=shift.ints%></td>
                    <td width="10%"><%=((shift.pay/shift.sales)*100).toFixed(0)%>%</td>
                  </tr>
                  <%});%>
                </tbody>
              </table>
            </div>
            <%});%>
          </div>
        </div>
      </div>
    </div>
    <div class='modal fade' role='dialog' id='reportModal'>
      <div class='modal-dialog modal-dialog-centered' role='document'>
        <div class='modal-content'>
          <div class='modal-header'>
            <h5 class='modal-title' id='report-title'></h5>
            <button type='button' class='close modalClose' data-dismiss='modal' aria-label='Close'>
              <span aria-hidden='true'>&times;</span>
            </button>
          </div>
          <div class='modal-body' id='modal-body'>

          </div>
          <div class='modal-footer'>
            <button type='button' class='btn btn-secondary modalClose' data-dismiss='modal'>Close</button>
          </div>
        </div>
      </div>
    </div>
    <%  if(allJobs.length>0){ %>
      <script>

        $(document).on('click', '.kpi', function(evt) {
          var tid="#"+$(this).attr('data-href')
          $('.kpiDropdown').css('height','0px')
          if ($(tid).css('height')=='0px') {
            $(tid).css('height',"450px")
          }else {
            $(tid).css('height','0px')
          }
        })
        $('#update').hide()
        $(document).on('change', '.viewJob:not(.hidden)', function(evt) {
          var jobIDs = [];
          $('#update').show()
          if ($('.viewJob:not(.hidden):not(:checked)').length>0) {
            $('#viewJob-all').prop('checked',false)
          }else {
            $('#viewJob-all').prop('checked',true)
          }
          $('.viewJob:checked:not(.hidden)').each(function() {
              jobIDs.push(this.id.split("-")[1])
          });
          $('#jobIDs').attr('value',jobIDs)
        })
        $(document).on('change', '#viewJob-all', function(evt) {
          var jobIDs = [];
          if ($(this).prop('checked')) {
            $('.viewJob:not(.hidden)').prop('checked',true)
          }else {
            $('.viewJob:not(.hidden)').prop('checked',false)
          }
          $('.viewJob:checked:not(.hidden)').each(function() {
              jobIDs.push(this.id.split("-")[1])
          });
          $('#jobIDs').attr('value',jobIDs)
          $('#update').show()
        })
        $(document).on('change', '#compareTo', function(evt) {
          var quoteIDs=[]
          if (typeof $('#compareTo').val() ==="string") {
            quoteIDs.push($('#compareTo').val())
          }else {
            quoteIDs=$('#compareTo').val()
          }
          $('#jobIDs').attr('value','')
          $('.viewJob').prop('disabled',true)
          $('#quoteIDs').attr('value',quoteIDs)
          $('#update').show()
        })
        <%
        function getDateArr(stdate,endate,format){
          var format=format=='f'?"DD/MM/YYYY":"YYYY-MM-DD"
          var checkDate=moment(stdate)
          var arr=[]
          for (var i = 0; i <= endate.diff(stdate,'days'); i++) {
            var insDate=moment(checkDate)
            arr.push(insDate.format(format))
            checkDate.add(1,'d')
          }
          return arr
        }
        var projData={}
        projects.forEach((project, i) => {
          var proj={}
          var datesF=dates.filter(el=>el.projectID==project.projectID)
          var statsF=stats.filter(el=>el.projectID==project.projectID)
          var jobsF=jobs.filter(el=>el.projectID==project.projectID)
          var plannerF=planner.filter(el=>el.projectID==project.projectID)
          var spendsF=spends.filter(el=>el.projectID==project.projectID)
          var costsF=costs.filter(el=>el.projectID==project.projectID)
          var datesArr=datesF.map(el=>el.dateValue).concat(statsF.map(el=>el.inputDate))
          var fwEndArr=datesF.filter(el=>el.dateName=='endDate').map(el=>el.dateValue)
          var fwStartArr=datesF.filter(el=>el.dateName=='startDate').map(el=>el.dateValue)
          var st=moment.utc(Math.min.apply(null,datesArr)).startOf("day").format("YYYY-MM-DD")
          var en=moment.utc(Math.max.apply(null,datesArr)).startOf("day").format("YYYY-MM-DD")
          var fwEnd=moment.utc(Math.max.apply(null,fwEndArr)).startOf("day")
          var fwStart=moment.utc(Math.min.apply(null,fwStartArr)).startOf("day")
          if (project.projectID<3) {
            fwStart=moment.utc('2020-07-01').startOf("day")
            fwEnd=moment.utc().startOf("day")
          }
          var completesDates=getDateArr(fwStart,fwEnd,'f')
          var completesDatesRef=getDateArr(fwStart,fwEnd,'r')
          var dateSpan=fwEnd.diff(fwStart,"days")+1
          var jobDailys=[]
          var jobResource=[]
          var targetGuide=[]
          var runningInts=0
          var catiJobs=jobsF.filter(el=>el.isJobCATI==1)
          var dailySales=[]
          var dailyWages=[]
          var dailyCont=[]
          var contTarget=[]
          var todayInts=0
          var todayIntsTarget=0
          completesDates.forEach((dte, i) => {
            var tdy=moment.utc().startOf("day")
            var thisDate=moment.utc(completesDatesRef[i]).startOf("day")
            var statsRow=statsF.filter(el=>dateIf(el.inputDate,"/","f")==dte)
            if (statsRow && thisDate.valueOf()<tdy.valueOf()) {
              var sales=statsRow.map(el=>el.sales).reduce((a, b) => a + b, 0)
              var pay=statsRow.map(el=>el.pay).reduce((a, b) => a + b, 0)
              dailySales.push(sales)
              dailyWages.push(pay)
              dailyCont.push((pay/sales)*100)
            }else {
              dailySales.push('')
              dailyWages.push('')
              dailyCont.push('')
            }
            contTarget.push(35)
            if (thisDate.valueOf()==tdy.valueOf()) {
              todayIntsTarget=runningInts
            }
          });
          catiJobs.forEach((job, i2) => {
            jobDailys[i2]=[]
            jobResource[i2]=[]
            var runningInts=0
            var runningRes=0
            var jobEnd=moment.utc(job.endDate).startOf('day')
            var jobStart=moment.utc(job.startDate).startOf('day')
            completesDates.forEach((dte, i) => {
              var thisDate=moment.utc(completesDatesRef[i]).startOf('day')
              var tdy=moment.utc().startOf('day')
              var plannerHrs=plannerF.find(el=>el.jobID==job.jobID && dateIf(el.plannerDate,"/","f")==dte)
              var resHours=plannerHrs?plannerHrs.plannerHours:(job.calcDays?job.calcHours/job.calcDays:0)
              if (thisDate.valueOf()<=fwEnd.valueOf() && thisDate.valueOf()>=fwStart.valueOf()) {
                if (thisDate.valueOf()<=jobEnd.valueOf()) {
                  if (thisDate.valueOf()==tdy.valueOf()) {
                    var statRow=statsF.find(el=>el.jobID==job.jobID && dateIf(el.inputDate,"/","f")==dte)
                    if (statRow) {
                      runningInts=runningInts+(statRow.hrs*job.ahr)
                    }else {
                      runningInts=runningInts+(0)
                    }
                    jobDailys[i2].push(runningInts)
                    runningRes=runningInts
                    jobResource[i2].push(runningInts)
                    todayInts=todayInts+runningInts
                  }else if (thisDate.valueOf()>tdy.valueOf()) {
                    if (thisDate.format('e')!=0 && thisDate.format('e')!=6) {
                      runningRes=runningRes+(resHours*job.ahr)
                    }
                    jobResource[i2].push(runningRes)
                  }else {
                    var statRow=statsF.find(el=>el.jobID==job.jobID && dateIf(el.inputDate,"/","f")==dte)
                    if (statRow) {
                      runningInts=runningInts+statRow.ints
                    }
                    jobDailys[i2].push(runningInts)
                    jobResource[i2].push('')
                  }
                }else{
                  if (thisDate.valueOf()==tdy.valueOf()) {
                    var statRow=statsF.find(el=>el.jobID==job.jobID && dateIf(el.inputDate,"/","f")==dte)
                    if (statRow) {
                      runningInts=runningInts+(statRow.hrs*job.ahr)
                    }else {
                      runningInts=runningInts+(0)
                    }
                    jobDailys[i2].push(runningInts)
                    runningRes=runningInts
                    jobResource[i2].push(runningInts)
                    todayInts=todayInts+runningInts
                  }else if (thisDate.valueOf()>tdy.valueOf()) {
                    jobDailys[i2].push('')
                    runningRes=runningRes+(0)
                    jobResource[i2].push(runningRes)
                  }else {
                    jobDailys[i2].push(jobDailys[i2][i-1])
                    jobResource[i2].push('')
                  }
                }
              }else {
                jobDailys[i2].push('')
                jobResource[i2].push('')
              }
            });
          });
          project.jobDailys=[]
          project.jobResource=[]
          project.completesDates=[]
          project.dailyCont=[]
          project.targetGuide=[]
          project.dailyWages=[]
          project.dailySales=[]
          if (jobDailys[0]) {
            project.completesDates=completesDates
            project.dailyCont=dailyCont
            project.targetGuide=targetGuide
            project.dailyWages=dailyWages
            project.dailySales=dailySales
            for (var n = 0; n < jobDailys[0].length; n++) {
              project.jobDailys.push('')
            }
            for (var n = 0; n < jobResource[0].length; n++) {
              project.jobResource.push('')
            }
            for (var i = 0; i < jobDailys.length; i++) {
              for (var n = 0; n < jobDailys[i].length; n++) {
                project.jobDailys[n]=Number(project.jobDailys[n])+Number(jobDailys[i][n])
              }
              for (var n = 0; n < jobResource[i].length; n++) {
                if (jobResource[i][n]=="") {
                  project.jobResource[n]=""
                }else {
                  project.jobResource[n]=Number(project.jobResource[n])+Number(jobResource[i][n])
                }
              }
            }
          }
        });
        var maxDateSpan=Math.max.apply(null,projects.map(el=>el.completesDates.length))
        var dateLabels=Array.from(Array(maxDateSpan).keys())
        var totalWages=projects.map(el=>el.dailyWages.reduce((a, b) => a + Number(b), 0)).reduce((a, b) => a + Number(b), 0)
        var totalSales=projects.map(el=>el.dailySales.reduce((a, b) => a + Number(b), 0)).reduce((a, b) => a + Number(b), 0)
        %>
        if (<%= totalWages/totalSales %><0.35) {
          $('#contKPI').css('color','green')
        }
        $('#contKPI').find('.info').text((<%=totalWages/totalSales%>*100).toFixed(0)+"%")
        var completesCol='rgba(24, 104, 214,0.4)'
        var resourceCol='rgba(24, 24, 24,0.1)'
        var ctxL = document.getElementById("contChart").getContext('2d');
        var contChart = new Chart(ctxL, {
            type: 'line',
            data: {
              labels:[<%-dateLabels.map(el=>"'Day "+(el+1)+"'") %>],
              datasets: [
              <%projects.forEach((project, i) => {%>
                {
                  label: "<%=project.quoteName%>",
                  data: [<%=project.dailyCont%>],
                  backgroundColor: 'rgba(0,0,0,0)',
                  borderWidth: 2,
                  spanGaps:true,
                  yAxisID: 'cont',
                  pointHitRadius: 5,
                },
              <%});%>
              ]
            },
            options: {
              tooltips: {
                callbacks: {
                  label: function(tooltipItem, data) {
                    var label = data.datasets[tooltipItem.datasetIndex].label || '';
                    if (label) {
                        label += ': ';
                    }
                    label += Math.floor(tooltipItem.yLabel)+"%";
                    return label;
                  }
                }
              },
              plugins: {
                datalabels: {
                  display:false
                }
              },
                responsive: true,
                legend: {
                  display: true,
                  labels: {
                    usePointStyle: true,
                    boxWidth: 10,
                    fontColor: 'black'
                  }
                },
                title: {
                  display: false,
                  text: 'Contribution',
                  fontColor: 'black',
                  fontSize: 14,
                  fontStyle: 'normal'
                  },
                scales: {
                  yAxes: [
                    {
                      id: 'cont',
                      type: 'linear',
                      offset:true,
                      position: 'left',
                      stacked:false,
                    }
                  ],
                  xAxes: [{
                  }]
                }
            }
        });
        var ctxL2 = document.getElementById("completesChart").getContext('2d');
        var completesChart = new Chart(ctxL2, {
            type: 'line',
            data: {
                labels: [<%-dateLabels.map(el=>"'Day "+(el+1)+"'") %>],
                datasets: [
                <%projects.forEach((project, i) => {%>
                  {
                    label: "<%=project.quoteName%>",
                    data: [<%=project.jobDailys%>],
                    pointHitRadius: 5,
                    backgroundColor: 'rgba(0,0,0,0)',
                    borderWidth: 2,
                    spanGaps:true,
                  },
                <%})%>
                <%projects.forEach((project, i) => {%>
                  {
                    label: "<%=project.quoteName%>",
                    data: [<%-project.jobResource%>],
                    pointRadius: 0,
                    backgroundColor: 'rgba(0,0,0,0)',
                    borderColor:resourceCol,
                    borderDash:[5, 5],
                    borderWidth: 2,
                    spanGaps:true,
                  },
                <%})%>
                ]
            },
            options: {
              tooltips: {
                callbacks: {
                  label: function(tooltipItem, data) {
                    var label = data.datasets[tooltipItem.datasetIndex].label || '';
                    if (label) {
                        label += ': ';
                    }
                    label += Math.floor(tooltipItem.yLabel);
                    return label;
                  }
                }
              },
              plugins: {
                datalabels: {
                  display:false
                }
              },
                responsive: true,
                legend: {
                  display: true,
                  labels: {
                    usePointStyle: true,
                    boxWidth: 10,
                    fontColor: 'black'
                  }
                },
                title: {
                  display: false,
                  text: 'Completes',
                  fontColor: 'black',
                  fontSize: 14,
                  fontStyle: 'normal'
                  },
                scales: {
                  yAxes: [
                    {
                    },
                  ],
                  xAxes: [{
                  }]
                }
            }
        });
        function callForRefresh(){
          $('#refreshOverlay').css('left','0px')
        }
        $(document).on('click', '#refreshOverlay', function(evt) {
          $('#refreshOverlay').addClass('spin')
          window.location.reload();
        })
        var downloadIcon = function(cell, formatterParams, onRendered){ //plain text value
            return '<a class="btn btn-sm qcbtn" target="_blank" href="'+cell.getValue()+'"><i class="fas fa-download"></i></a>'
        };
        var viewIcon = function(cell, formatterParams, onRendered){ //plain text value
            return '<a class="btn btn-sm qcbtn" target="_blank" href="/edit-qc-check/'+cell.getValue()+'"><i class="fas fa-search"></i></a>'
        };
        $('#reportModal').on('shown.bs.modal', function (e) {
          var repTable=new Tabulator("#modal-body table",{
            autoResize:true,
            layout:"fitData",
            height:'50vh',
            initialSort:[
              {column:1, dir:"desc"}
            ],
          })
          repTable.redraw()
        })
        const performanceTable = $('#performanceTable').DataTable({
          paging: false,
          width:"90%"
        })
        $('#performanceTable tbody').on('click', 'tr', function () {
          var data = performanceTable.row(this).data();
          $("#modal-body").html($('#agent'+performanceTable.row(this).index()).html())
          $("#report-title").text(data[0])
          $("#reportModal").modal("show")
        });
        const qualityTable = new Tabulator("#qualityTable", {
          autoResize:true,
          layout:"fitColumns",
          index:"qcID",
          pagination:"local", //enable local pagination.
          paginationSize:5,
          ajaxURL:"/project-qc-checks/",
          rowFormatter:function(row){
            row.getCells().forEach((cell, i) => {
              // cell.getElement().style.height= "29px";
              cell.getElement().style.padding= "4px";
              cell.getElement().style.height= "29px";
            })
          },
          columns:[
            {title:"qcID", visible:false, field:"MasterQCID"},
            {title:"Project", field:"quoteName"},
            {title:"Agent", field:"agentName"},
            {title:"Interview", field:"interviewDate", formatter:"datetime", formatterParams:{
                inputFormat:"YYYY-MM-DD",
                outputFormat:"DD/MM/YYYY"
            }},
            {title:"Client-suitable?", field:"clientFriendly",formatter:"tickCross", formatterParams:{
              allowTruthy:true
            },topCalc:"count"},
            {field:"score", title:'Score', topCalc:"avg",width:100},
            {field:"score", formatter:"traffic", formatterParams:{
              min:0,
              max:100,
              color:["red", "orange", "green"],
            },width:50,topCalc:"avg"},
            {title:"", field:"MasterQCID",formatter:viewIcon,width:50},
            {title:"", field:"recordingID",formatter:downloadIcon,width:50},
          ],
          dataLoaded:function(data){
            if (data.map(el=>el.score).reduce((a, b) => a + b, 0)/data.length>50) {
              $('#qualityKPI').css('color','green')
            }
            var score=data.map(el=>el.score).length>0?(data.map(el=>el.score).reduce((a, b) => a + b, 0)/data.length).toFixed(1):'-'
            $('#qualityKPI').find('.info').text(score)
          }
        })
        function checkDelete(jid) {
          if (confirm("Are you sure you want to delete this target group?")) {
            $.ajax({
                url: '/delete-group/'+jid,
                type: 'GET',
                contentType: 'application/json',
                success: function (response) {
                  location.reload();
                },
                error: function (jqXHR, exception) {
                  alert(getErrorMessage(jqXHR, exception))
                  location.reload();
                },
            });
          }
          return false;
        }
        function checkDupe(jid) {
          if (confirm("Are you sure you want to duplicate this target group?")) {
            window.location.href='/duplicate-group/'+jid
          }
          return false;
        }
        function getErrorMessage(jqXHR, exception) {
           var msg = '';
           if (jqXHR.status === 0) {
               msg = 'Not connect.\n Verify Network.';
           } else if (jqXHR.status == 404) {
               msg = 'Requested page not found. [404]';
           } else if (jqXHR.status == 500) {
               msg = 'Internal Server Error [500]. '+JSON.parse(jqXHR.responseText).error;
           } else if (exception === 'parsererror') {
               msg = 'Requested JSON parse failed.';
           } else if (exception === 'timeout') {
               msg = 'Time out error.';
           } else if (exception === 'abort') {
               msg = 'Ajax request aborted.';
           } else {
               msg = JSON.parse(jqXHR.responseText).error;
           }
           return msg;
         }
      </script>
      <%}%>
</body>
</html>
